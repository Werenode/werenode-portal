(self.webpackChunkwerenode_portal=self.webpackChunkwerenode_portal||[]).push([[434],{6766:function(e,n,a){"use strict";a.r(n),a.d(n,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return m},toc:function(){return c},default:function(){return v}});var r=a(2122),t=a(9756),s=(a(7294),a(3905)),d=["components"],i={sidebar_position:3},o="Smart Contracts",m={unversionedId:"smartcontracts",id:"smartcontracts",isDocsHomePage:!1,title:"Smart Contracts",description:"WRC Token",source:"@site/docs/smartcontracts.md",sourceDirName:".",slug:"/smartcontracts",permalink:"/docs/smartcontracts",editUrl:"https://github.com/Werenode/werenode-portal/docs/smartcontracts.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/docs/architecture"},next:{title:"EVSE Manager Server",permalink:"/docs/evsemanager"}},c=[{value:"WRC Token",id:"wrc-token",children:[]},{value:"EVSE Ledger",id:"evse-ledger",children:[]}],p={toc:c};function v(e){var n=e.components,a=(0,t.Z)(e,d);return(0,s.kt)("wrapper",(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"smart-contracts"},"Smart Contracts"),(0,s.kt)("h2",{id:"wrc-token"},"WRC Token"),(0,s.kt)("h2",{id:"evse-ledger"},"EVSE Ledger"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-archetype"},'(* Copyright (C) 2020-2021 Werenode SAS *)\n\narchetype evseledger(admin : address)\n\nvariable admin_candidate : option<address> = none\n\nstates =\n| Running\n| Paused\n\nasset evse to big_map {\n  evse_id    : string;\n  evse_mng   : address;\n  evse_owner : address;\n  evse_data  : bytes;\n}\n\nasset evsemanager {\n  mng_addr   : address;\n  mng_server : bytes; (* encrypted data to connect to evsemanager server *)\n  evses      : aggregate<evse> = [];\n}\n\nrecord evse_params {\n  pid     : string;\n  pmng   : address;\n  powner : address;\n  pdata   : bytes;\n}\n\nentry add_evse (params : list<evse_params>) {\n  state is Running\n  effect {\n    for p in params do\n      dorequire(evsemanager.contains(p.pmng), (p.pmng, "EVSEMANAGER_NOT_FOUND"));\n      evse.add({ evse_id = p.pid; evse_mng = p.pmng; evse_owner = p.powner; evse_data = p.pdata });\n      evsemanager[p.pmng].evses.add(p.pid);\n    done\n  }\n}\n\nentry update_evse (params : list<evse_params>) {\n  state is Running\n  effect {\n    for p in params do\n      dorequire(p.powner = caller or admin = caller, (p.powner, "CALLER_NOT_OWNER"));\n      dorequire(evsemanager.contains(p.pmng), (p.pmng, "EVSEMANAGER_NOT_FOUND"));\n      evse.update(p.pid, { evse_mng = p.pmng; evse_owner = p.powner; evse_data = p.pdata });\n    done\n  }\n}\n\nentry remove_evse (evse_ids : list<string>) {\n  state is Running\n  effect {\n    for id in evse_ids do\n      dorequire(evse.contains(id), (id, "EVSE_NOT_EXISTS"));\n      var owner = evse[id].evse_owner;\n      dorequire(owner = caller or admin = caller, ((owner, id), "CALLER_NOT_EVSE_OWNER"));\n      var mng = evse[id].evse_mng;\n      if (evsemanager.contains(mng)) then\n        evsemanager[mng].evses.remove(id);\n      evse.remove(id);\n    done\n  }\n}\n\nentry addupdate_evsemanager (addr     : address,\n                             server   : bytes) {\n  called by admin\n  state is Running\n  effect {\n    evsemanager.addupdate(addr, { mng_server = server });\n  }\n}\n\nentry remove_evsemanager(addr : address) {\n  called by admin\n  state is Running\n  effect {\n    evsemanager.remove(addr)\n  }\n}\n\nentry transfer_admin (pnew_admin : address) {\n  called by admin\n  effect {\n    admin_candidate := some(pnew_admin);\n  }\n}\n\nentry claim_admin () {\n  called by opt_get(admin_candidate)\n  effect {\n    admin := caller;\n    admin_candidate := none\n  }\n}\n\ntransition pause () {\n  called by admin\n  from Running to Paused\n}\n\ntransition run () {\n  called by admin\n  from Paused to Running\n}\n')))}v.isMDXComponent=!0}}]);