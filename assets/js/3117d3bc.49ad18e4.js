"use strict";(self.webpackChunkwerenode_portal=self.webpackChunkwerenode_portal||[]).push([[7434],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return u}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function s(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?s(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)r=s[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=t.createContext({}),c=function(e){var n=t.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(d.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},l=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,s=e.originalType,d=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),l=c(r),u=a,v=l["".concat(d,".").concat(u)]||l[u]||m[u]||s;return r?t.createElement(v,o(o({ref:n},p),{},{components:r})):t.createElement(v,o({ref:n},p))}));function u(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=l;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}l.displayName="MDXCreateElement"},6766:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return i},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return p},default:function(){return l}});var t=r(3117),a=r(102),s=(r(7294),r(3905)),o=["components"],i={sidebar_position:3},d="Smart Contracts",c={unversionedId:"smartcontracts",id:"smartcontracts",isDocsHomePage:!1,title:"Smart Contracts",description:"WRC Token",source:"@site/docs/smartcontracts.md",sourceDirName:".",slug:"/smartcontracts",permalink:"/docs/smartcontracts",editUrl:"https://github.com/Werenode/werenode-portal/docs/smartcontracts.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/docs/architecture"},next:{title:"EVSE Manager Server",permalink:"/docs/evsemanager"}},p=[{value:"WRC Token",id:"wrc-token",children:[]},{value:"EVSE Ledger",id:"evse-ledger",children:[]}],m={toc:p};function l(e){var n=e.components,r=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"smart-contracts"},"Smart Contracts"),(0,s.kt)("h2",{id:"wrc-token"},"WRC Token"),(0,s.kt)("h2",{id:"evse-ledger"},"EVSE Ledger"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-archetype"},'(* Copyright (C) 2020-2021 Werenode SAS *)\n\narchetype evseledger(admin : address)\n\nvariable admin_candidate : option<address> = none\n\nstates =\n| Running\n| Paused\n\nasset evse to big_map {\n  evse_id    : string;\n  evse_mng   : address;\n  evse_owner : address;\n  evse_data  : bytes;\n}\n\nasset evsemanager {\n  mng_addr   : address;\n  mng_server : bytes; (* encrypted data to connect to evsemanager server *)\n  evses      : aggregate<evse> = [];\n}\n\nrecord evse_params {\n  pid     : string;\n  pmng   : address;\n  powner : address;\n  pdata   : bytes;\n}\n\nentry add_evse (params : list<evse_params>) {\n  state is Running\n  effect {\n    for p in params do\n      dorequire(evsemanager.contains(p.pmng), (p.pmng, "EVSEMANAGER_NOT_FOUND"));\n      evse.add({ evse_id = p.pid; evse_mng = p.pmng; evse_owner = p.powner; evse_data = p.pdata });\n      evsemanager[p.pmng].evses.add(p.pid);\n    done\n  }\n}\n\nentry update_evse (params : list<evse_params>) {\n  state is Running\n  effect {\n    for p in params do\n      dorequire(p.powner = caller or admin = caller, (p.powner, "CALLER_NOT_OWNER"));\n      dorequire(evsemanager.contains(p.pmng), (p.pmng, "EVSEMANAGER_NOT_FOUND"));\n      evse.update(p.pid, { evse_mng = p.pmng; evse_owner = p.powner; evse_data = p.pdata });\n    done\n  }\n}\n\nentry remove_evse (evse_ids : list<string>) {\n  state is Running\n  effect {\n    for id in evse_ids do\n      dorequire(evse.contains(id), (id, "EVSE_NOT_EXISTS"));\n      var owner = evse[id].evse_owner;\n      dorequire(owner = caller or admin = caller, ((owner, id), "CALLER_NOT_EVSE_OWNER"));\n      var mng = evse[id].evse_mng;\n      if (evsemanager.contains(mng)) then\n        evsemanager[mng].evses.remove(id);\n      evse.remove(id);\n    done\n  }\n}\n\nentry addupdate_evsemanager (addr     : address,\n                             server   : bytes) {\n  called by admin\n  state is Running\n  effect {\n    evsemanager.addupdate(addr, { mng_server = server });\n  }\n}\n\nentry remove_evsemanager(addr : address) {\n  called by admin\n  state is Running\n  effect {\n    evsemanager.remove(addr)\n  }\n}\n\nentry transfer_admin (pnew_admin : address) {\n  called by admin\n  effect {\n    admin_candidate := some(pnew_admin);\n  }\n}\n\nentry claim_admin () {\n  called by opt_get(admin_candidate)\n  effect {\n    admin := caller;\n    admin_candidate := none\n  }\n}\n\ntransition pause () {\n  called by admin\n  from Running to Paused\n}\n\ntransition run () {\n  called by admin\n  from Paused to Running\n}\n')))}l.isMDXComponent=!0}}]);